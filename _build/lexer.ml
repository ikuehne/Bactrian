# 10 "lexer.mll"
 
   open Parser
   open Core.Std

   let char_of_string s =
      match s with
      | "newline" -> Result.Ok '\n'
      | "tab"  -> Result.Ok '\t'
      | "space" -> Result.Ok ' '
      | s when String.length s = 1 -> Result.Ok (Char.of_string s)
      | _   -> Result.Error (Errors.Literal s)

   let int_of_string_result num = 
      try Result.Ok (int_of_string num)
      with Failure "int_of_string" -> Result.Error (Errors.Literal num)

# 19 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\245\255\002\000\028\000\054\000\056\000\252\255\253\255\
    \254\255\003\000\080\000\082\000\115\000\119\000\121\000\125\000\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\009\000\007\000\009\000\009\000\255\255\255\255\
    \255\255\000\000\009\000\006\000\005\000\004\000\008\000\008\000\
    ";
  Lexing.lex_default = 
   "\002\000\000\000\002\000\002\000\002\000\002\000\000\000\000\000\
    \000\000\009\000\015\000\002\000\002\000\002\000\014\000\015\000\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\008\000\008\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \008\000\000\000\255\255\005\000\000\000\255\255\255\255\000\000\
    \007\000\006\000\255\255\255\255\000\000\004\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\009\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \014\000\014\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\014\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\255\255\010\000\000\000\000\000\255\255\
    \000\000\255\255\000\000\255\255\255\255\255\255\011\000\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\012\000\013\000\255\255\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\255\255\
    \000\000\255\255\000\000\000\000\000\000\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\002\000\002\000\009\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\002\000\000\000\255\255\003\000\003\000\255\255\
    \000\000\000\000\002\000\002\000\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\003\000\002\000\255\255\004\000\
    \004\000\005\000\005\000\255\255\003\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\004\000\003\000\
    \005\000\010\000\010\000\011\000\011\000\255\255\004\000\004\000\
    \005\000\005\000\255\255\255\255\255\255\255\255\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \010\000\004\000\011\000\005\000\255\255\255\255\255\255\255\255\
    \010\000\010\000\011\000\011\000\012\000\012\000\255\255\255\255\
    \013\000\013\000\014\000\014\000\255\255\255\255\015\000\015\000\
    \255\255\255\255\255\255\010\000\255\255\011\000\255\255\255\255\
    \255\255\255\255\255\255\012\000\005\000\255\255\255\255\013\000\
    \255\255\014\000\255\255\012\000\012\000\015\000\005\000\013\000\
    \013\000\014\000\014\000\255\255\255\255\015\000\015\000\255\255\
    \255\255\255\255\255\255\255\255\005\000\005\000\012\000\255\255\
    \255\255\255\255\013\000\255\255\255\255\255\255\255\255\255\255\
    \015\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\002\000\009\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\004\000\255\255\
    \005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \010\000\255\255\011\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\012\000\255\255\255\255\255\255\013\000\
    \255\255\014\000\255\255\255\255\255\255\015\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec lex lexbuf =
    __ocaml_lex_lex_rec lexbuf 0
and __ocaml_lex_lex_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 37 "lexer.mll"
                              ( lex lexbuf                           )
# 152 "lexer.ml"

  | 1 ->
# 38 "lexer.mll"
                              ( lex lexbuf                           )
# 157 "lexer.ml"

  | 2 ->
# 39 "lexer.mll"
                              ( TOK_LPAREN                           )
# 162 "lexer.ml"

  | 3 ->
# 40 "lexer.mll"
                              ( TOK_RPAREN                           )
# 167 "lexer.ml"

  | 4 ->
# 41 "lexer.mll"
                              ( TOK_UNIT                             )
# 172 "lexer.ml"

  | 5 ->
# 42 "lexer.mll"
                              ( TOK_BOOL true                        )
# 177 "lexer.ml"

  | 6 ->
# 43 "lexer.mll"
                              ( TOK_BOOL false                       )
# 182 "lexer.ml"

  | 7 ->
let
# 44 "lexer.mll"
                num
# 188 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 44 "lexer.mll"
                              ( TOK_INT (int_of_string_result num)   )
# 192 "lexer.ml"

  | 8 ->
let
# 45 "lexer.mll"
                       c
# 198 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 45 "lexer.mll"
                              ( TOK_CHAR (char_of_string c)          )
# 202 "lexer.ml"

  | 9 ->
let
# 46 "lexer.mll"
          identifier
# 208 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 46 "lexer.mll"
                              ( TOK_ID identifier                    )
# 212 "lexer.ml"

  | 10 ->
# 47 "lexer.mll"
                              ( TOK_EOF                              )
# 217 "lexer.ml"

  | 11 ->
# 49 "lexer.mll"
      ( raise (Failure ("Unrecognized token: " ^ (Lexing.lexeme lexbuf))) )
# 222 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_lex_rec lexbuf __ocaml_lex_state

;;

# 51 "lexer.mll"
 
  (* Nothing. *)

# 233 "lexer.ml"
