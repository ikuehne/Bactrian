(print-string "Testing linear recursion performance...\n")

(define (recursion-test n)
  (if (= n 0)
      0
      (+. n (recursion-test (- n 1)))))

(define depth 55000)

(print (recursion-test depth))

(print-string "\n")

(print-string "Testing deep tree recursion performance...\n")

(define (ackermann m n)
  (if (= m 0) 
      (+. n 1)
      (if (= n 0)
          (ackermann (- m 1)
                     1)
          (ackermann (- m 1)
                     (ackermann m (- n 1))))))

(print (ackermann 3 4))

(print-string "\n")

(print-string "Testing list performance...\n")

(define (range n)
   (define
     (aux n)
     (if (= n 0)
         '()
         (cons n (aux (- n 1)))))
   (reverse (aux n)))

(print (foldr +. 0 (range 55000)))

(print-string "\n")

(print-string "Testing TCO...\n")

(define (tco-test n)
  (if (= n 0)
      0
      (tco-test (- n 1))))

(print (tco-test 10000000))

(print-string "\n")
