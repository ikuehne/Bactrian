; 
; Copyright 2015 Ian Kuehne.
;
; Email: ikuehne@caltech.edu
;
; This file is part of Bactrian.
;
; Bactrian is free software: you can redistribute it and/or modify it under the
; terms of the GNU General Public License as published by the Free Software
; Foundation, either version 3 of the License, or (at your option) any later
; version.
;
; Bactrian is distributed in the hope that it will be useful, but WITHOUT ANY
; WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
; A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License along with
; Bactrian.  If not, see <http://www.gnu.org/licenses/>.

;;
;; The part of the Bactrian runtime written in Bactrian.
;;

;; Control structures.

; Composition operator.
(define .
  (lambda (f g)
    (lambda (x)
      (f (g x)))))

; Sequencing operations. Evaluate all arguments, returning only the last one.
(define seq (lambda args (fold (lambda (x y) y) () args)))

;; List functions.

; Return a well-formed list of all arguments.
(define list (lambda args args))

; Alias for the unit value.
(define nil ())

; Check if a value is nil.
(define nil? (lambda (x) (= nil x)))

; Left fold over lists.
(define fold
  (lambda (f init lst)
     (if (nil? lst)
       init
       (fold f (f init (car lst)) (cdr lst)))))

; Reverse a list.
(define reverse
  (seq
    (define aux
      (lambda (l accum)
	(if (nil? l)
	  accum
	  (aux (cdr l) (cons (car l) accum)))))
    (lambda (l) (aux l nil))))

; Right fold over lists.
(define foldr
  (lambda (f init lst)
      (fold f init (reverse lst))))

(define map
  (lambda (f lst)
    (foldr
      (lambda (b_list a)
	(cons (f a) b_list))
      ()
      lst)))
